import keyboard
from langchain.memory import ConversationBufferMemory
from langchain_community.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings, GoogleGenerativeAI
from langchain.chains import RetrievalQA,ConversationalRetrievalChain
from langchain.prompts import PromptTemplate
from langchain_huggingface import HuggingFaceEmbeddings

from GetApikey import loadapi

API_KEY=loadapi()

# Embeddings Google
embeddings = HuggingFaceEmbeddings(model_name="intfloat/multilingual-e5-large-instruct")

# Load FAISS database ƒë√£ l∆∞u
db = FAISS.load_local("vector_db2", embeddings, allow_dangerous_deserialization=True)

# T·∫°o retriever t·ª´ FAISS
retriever = db.as_retriever(search_kwargs={"k": 5})

# LLM Google Gemini (text-only)
llm = GoogleGenerativeAI(
    model="gemini-2.5-flash",
    google_api_key=API_KEY,
    temperature=0.5
)

# Prompt cho RAG
prompt_template = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI. H√£y s·ª≠ d·ª•ng th√¥ng tin trong context ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin ho·∫∑c c·∫£m gi√°c th√¥ng tin kh√¥ng ƒë∆∞·ª£c li√™n quan, h√£y n√≥i c√¥ng c·ª• truy v·∫•n ƒë∆∞∆°c th√¥ng tin kh√¥ng li√™n quan v√† gi·∫£i th√≠ch t·∫°i sao "

Context: {context}

C√¢u h·ªèi: {question}

Tr·∫£ l·ªùi:
"""

prompt = PromptTemplate(
    template=prompt_template,
    input_variables=["context", "question"]
)

# Memory l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
memory = ConversationBufferMemory(
    memory_key="chat_history",
    return_messages=True
)


# T·∫°o RetrievalQA chain
qa_chain = ConversationalRetrievalChain.from_llm(
    llm=llm,
    retriever=retriever,
    memory=memory,
    combine_docs_chain_kwargs={"prompt": prompt}
)

# V√≤ng l·∫∑p chat
print("üí¨ Chat v·ªõi Java RAG Bot (g√µ 'exit' ƒë·ªÉ tho√°t)\n")
while True:
    query = input("‚ùìB·∫°n: ")
    if query.lower() in ["exit", "quit"]:
        print("üëã K·∫øt th√∫c chat.")
        break
    # exit khi nh·∫•n 'Esc'
    if keyboard.is_pressed('esc'):
        print("üëã K·∫øt th√∫c chat.")
        break

    result = qa_chain.invoke({"question": query})
    print("ü§ñ Bot:", result["answer"])


